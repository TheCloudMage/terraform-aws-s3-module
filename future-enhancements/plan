Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

module.region_acl.data.aws_caller_identity.current: Refreshing state...
module.naming.data.aws_caller_identity.current: Refreshing state...
module.logging.data.aws_caller_identity.current: Refreshing state...
module.cmk_encryption.data.aws_caller_identity.current: Refreshing state...
module.write_policy.data.aws_caller_identity.current: Refreshing state...
module.custom_policy.data.aws_caller_identity.current: Refreshing state...
data.aws_iam_policy_document.test_policy: Refreshing state...
module.versioning.data.aws_caller_identity.current: Refreshing state...
module.combined_policy.data.aws_caller_identity.current: Refreshing state...
module.default_encryption.data.aws_caller_identity.current: Refreshing state...
module.defaults.data.aws_caller_identity.current: Refreshing state...
module.write_custom_policy.data.aws_caller_identity.current: Refreshing state...
module.read_policy.data.aws_caller_identity.current: Refreshing state...
module.hosting.data.aws_caller_identity.current: Refreshing state...
module.standalone_custom_policy.data.aws_caller_identity.current: Refreshing state...
module.defaults.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.naming.data.aws_iam_policy_document.write_access: Refreshing state...
module.defaults.data.aws_iam_policy_document.read_access: Refreshing state...
module.cmk_encryption.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.cmk_encryption.data.aws_iam_policy_document.read_access: Refreshing state...
module.naming.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.naming.data.aws_iam_policy_document.read_access: Refreshing state...
module.defaults.data.aws_iam_policy_document.write_access: Refreshing state...
module.versioning.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.cmk_encryption.data.aws_iam_policy_document.write_access: Refreshing state...
module.default_encryption.data.aws_iam_policy_document.write_access: Refreshing state...
module.versioning.data.aws_iam_policy_document.read_access: Refreshing state...
module.versioning.data.aws_iam_policy_document.write_access: Refreshing state...
module.default_encryption.data.aws_iam_policy_document.read_access: Refreshing state...
module.write_policy.data.aws_iam_policy_document.read_access: Refreshing state...
module.write_policy.data.aws_iam_policy_document.write_access: Refreshing state...
module.write_policy.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.default_encryption.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.combined_policy.data.aws_iam_policy_document.write_access: Refreshing state...
module.combined_policy.data.aws_iam_policy_document.read_access: Refreshing state...
module.combined_policy.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.defaults.data.aws_iam_policy_document.read_policy: Refreshing state...
module.cmk_encryption.data.aws_iam_policy_document.read_policy: Refreshing state...
module.naming.data.aws_iam_policy_document.read_policy: Refreshing state...
module.versioning.data.aws_iam_policy_document.read_policy: Refreshing state...
module.logging.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.logging.data.aws_iam_policy_document.read_access: Refreshing state...
module.logging.data.aws_iam_policy_document.write_access: Refreshing state...
module.write_policy.data.aws_iam_policy_document.read_policy: Refreshing state...
module.default_encryption.data.aws_iam_policy_document.read_policy: Refreshing state...
module.defaults.data.aws_iam_policy_document.write_policy: Refreshing state...
module.combined_policy.data.aws_iam_policy_document.read_policy: Refreshing state...
module.cmk_encryption.data.aws_iam_policy_document.write_policy: Refreshing state...
module.versioning.data.aws_iam_policy_document.write_policy: Refreshing state...
module.naming.data.aws_iam_policy_document.write_policy: Refreshing state...
module.logging.data.aws_iam_policy_document.read_policy: Refreshing state...
module.write_policy.data.aws_iam_policy_document.write_policy: Refreshing state...
module.defaults.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.default_encryption.data.aws_iam_policy_document.write_policy: Refreshing state...
module.combined_policy.data.aws_iam_policy_document.write_policy: Refreshing state...
module.cmk_encryption.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.naming.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.versioning.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.logging.data.aws_iam_policy_document.write_policy: Refreshing state...
module.defaults.data.aws_iam_policy_document.this: Refreshing state...
module.write_policy.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.default_encryption.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.versioning.data.aws_iam_policy_document.this: Refreshing state...
module.cmk_encryption.data.aws_iam_policy_document.this: Refreshing state...
module.naming.data.aws_iam_policy_document.this: Refreshing state...
module.logging.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.write_policy.data.aws_iam_policy_document.this: Refreshing state...
module.default_encryption.data.aws_iam_policy_document.this: Refreshing state...
module.logging.data.aws_iam_policy_document.this: Refreshing state...
module.custom_policy.data.aws_iam_policy_document.read_access: Refreshing state...
module.custom_policy.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.custom_policy.data.aws_iam_policy_document.write_access: Refreshing state...
module.custom_policy.data.aws_iam_policy_document.read_policy: Refreshing state...
module.custom_policy.data.aws_iam_policy_document.write_policy: Refreshing state...
module.region_acl.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.region_acl.data.aws_iam_policy_document.read_access: Refreshing state...
module.region_acl.data.aws_iam_policy_document.write_access: Refreshing state...
module.region_acl.data.aws_iam_policy_document.read_policy: Refreshing state...
module.region_acl.data.aws_iam_policy_document.write_policy: Refreshing state...
module.region_acl.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.region_acl.data.aws_iam_policy_document.this: Refreshing state...
module.read_policy.data.aws_iam_policy_document.write_access: Refreshing state...
module.read_policy.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.hosting.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.read_policy.data.aws_iam_policy_document.read_access: Refreshing state...
module.hosting.data.aws_iam_policy_document.read_access: Refreshing state...
module.hosting.data.aws_iam_policy_document.write_access: Refreshing state...
module.write_custom_policy.data.aws_iam_policy_document.read_access: Refreshing state...
module.write_custom_policy.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.write_custom_policy.data.aws_iam_policy_document.write_access: Refreshing state...
module.read_policy.data.aws_iam_policy_document.read_policy: Refreshing state...
module.hosting.data.aws_iam_policy_document.read_policy: Refreshing state...
module.write_custom_policy.data.aws_iam_policy_document.read_policy: Refreshing state...
module.hosting.data.aws_iam_policy_document.write_policy: Refreshing state...
module.write_custom_policy.data.aws_iam_policy_document.write_policy: Refreshing state...
module.read_policy.data.aws_iam_policy_document.write_policy: Refreshing state...
module.hosting.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.read_policy.data.aws_iam_policy_document.custom_policy: Refreshing state...
module.hosting.data.aws_iam_policy_document.this: Refreshing state...
module.read_policy.data.aws_iam_policy_document.this: Refreshing state...
module.standalone_custom_policy.data.aws_iam_policy_document.encryption_in_transit: Refreshing state...
module.standalone_custom_policy.data.aws_iam_policy_document.write_access: Refreshing state...
module.standalone_custom_policy.data.aws_iam_policy_document.read_access: Refreshing state...
module.standalone_custom_policy.data.aws_iam_policy_document.read_policy: Refreshing state...
module.standalone_custom_policy.data.aws_iam_policy_document.write_policy: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.cmk_encryption.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + server_side_encryption_configuration {
          + rule {
              + apply_server_side_encryption_by_default {
                  + kms_master_key_id = "aws:kms"
                  + sse_algorithm     = "aws:kms"
                }
            }
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.cmk_encryption.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825/*",
                          + "arn:aws:s3:::test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.combined_policy.data.aws_iam_policy_document.custom_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "custom_policy"  {
      + id            = (known after apply)
      + json          = (known after apply)
      + override_json = (known after apply)
      + source_json   = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-combined/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-combined",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                  + {
                      + Action    = [
                          + "s3:ListMultipartUploadParts",
                          + "s3:ListBucketVersions",
                          + "s3:ListBucketMultipartUploads",
                          + "s3:ListBucket*",
                          + "s3:ListAllMyBuckets",
                          + "s3:HeadBucket",
                          + "s3:GetObjectVersion",
                          + "s3:GetObjectTagging",
                          + "s3:GetObject",
                          + "s3:GetEncryptionConfiguration",
                          + "s3:GetBucketVersioning",
                          + "s3:GetBucketLocation",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789101:role/AWS-S3-ReadOnly-Role"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-combined/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-combined",
                        ]
                      + Sid       = "ReadAccess"
                    },
                  + {
                      + Action    = [
                          + "s3:RestoreObject",
                          + "s3:PutObjectRetention",
                          + "s3:PutObject",
                          + "s3:DeleteObjectVersion",
                          + "s3:DeleteObject",
                          + "s3:AbortMultipartUpload",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789101:role/AWS-S3-Write-Role"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-combined/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-combined",
                        ]
                      + Sid       = "WriteAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.combined_policy.data.aws_iam_policy_document.this will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "this"  {
      + id          = (known after apply)
      + json        = (known after apply)
      + source_json = (known after apply)
    }

  # module.combined_policy.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "321340180252-custom-test-bucket-20200825-us-west-2-combined"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.combined_policy.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.custom_policy.data.aws_iam_policy_document.custom_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "custom_policy"  {
      + id            = (known after apply)
      + json          = (known after apply)
      + override_json = (known after apply)
      + source_json   = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.custom_policy.data.aws_iam_policy_document.this will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "this"  {
      + id          = (known after apply)
      + json        = (known after apply)
      + source_json = (known after apply)
    }

  # module.custom_policy.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "321340180252-custom-test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.custom_policy.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.default_encryption.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + server_side_encryption_configuration {
          + rule {
              + apply_server_side_encryption_by_default {
                  + sse_algorithm = "AES256"
                }
            }
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.default_encryption.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825/*",
                          + "arn:aws:s3:::test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.defaults.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.defaults.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825/*",
                          + "arn:aws:s3:::test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.hosting.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 1500
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }

      + website {
          + error_document = "error.py"
          + index_document = "index.py"
        }
    }

  # module.hosting.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825/*",
                          + "arn:aws:s3:::test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.logging.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + logging {
          + target_bucket = "test-logging-bucket-configuration-test"
          + target_prefix = "test-bucket-20200825/"
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.logging.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825/*",
                          + "arn:aws:s3:::test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.naming.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "321340180252-yes-test-bucket-20200825-us-west-2-42"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.naming.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-yes-test-bucket-20200825-us-west-2-42/*",
                          + "arn:aws:s3:::321340180252-yes-test-bucket-20200825-us-west-2-42",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.read_policy.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825-us-east-1-read_only"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.read_policy.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825-us-east-1-read_only/*",
                          + "arn:aws:s3:::test-bucket-20200825-us-east-1-read_only",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                  + {
                      + Action    = [
                          + "s3:ListMultipartUploadParts",
                          + "s3:ListBucketVersions",
                          + "s3:ListBucketMultipartUploads",
                          + "s3:ListBucket*",
                          + "s3:ListAllMyBuckets",
                          + "s3:HeadBucket",
                          + "s3:GetObjectVersion",
                          + "s3:GetObjectTagging",
                          + "s3:GetObject",
                          + "s3:GetEncryptionConfiguration",
                          + "s3:GetBucketVersioning",
                          + "s3:GetBucketLocation",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789101:role/AWS-S3-ReadOnly-Role"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825-us-east-1-read_only/*",
                          + "arn:aws:s3:::test-bucket-20200825-us-east-1-read_only",
                        ]
                      + Sid       = "ReadAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.region_acl.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "public-read"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.region_acl.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825/*",
                          + "arn:aws:s3:::test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.standalone_custom_policy.data.aws_iam_policy_document.custom_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "custom_policy"  {
      + id            = (known after apply)
      + json          = (known after apply)
      + override_json = (known after apply)
      + source_json   = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                  + {
                      + Action    = [
                          + "s3:RestoreObject",
                          + "s3:PutObjectRetention",
                          + "s3:PutObject",
                          + "s3:DeleteObjectVersion",
                          + "s3:DeleteObject",
                          + "s3:AbortMultipartUpload",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789101:role/AWS-S3-Write-Role"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825",
                        ]
                      + Sid       = "WriteAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.standalone_custom_policy.data.aws_iam_policy_document.this will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "this"  {
      + id          = (known after apply)
      + json        = (known after apply)
      + source_json = (known after apply)
    }

  # module.standalone_custom_policy.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "321340180252-custom-test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.standalone_custom_policy.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.versioning.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = true
          + mfa_delete = true
        }
    }

  # module.versioning.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825/*",
                          + "arn:aws:s3:::test-bucket-20200825",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.write_custom_policy.data.aws_iam_policy_document.custom_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "custom_policy"  {
      + id            = (known after apply)
      + json          = (known after apply)
      + override_json = (known after apply)
      + source_json   = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-write/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-write",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                  + {
                      + Action    = [
                          + "s3:RestoreObject",
                          + "s3:PutObjectRetention",
                          + "s3:PutObject",
                          + "s3:DeleteObjectVersion",
                          + "s3:DeleteObject",
                          + "s3:AbortMultipartUpload",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789101:role/AWS-S3-Write-Role"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-write/*",
                          + "arn:aws:s3:::321340180252-custom-test-bucket-20200825-us-west-2-write",
                        ]
                      + Sid       = "WriteAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.write_custom_policy.data.aws_iam_policy_document.this will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "this"  {
      + id          = (known after apply)
      + json        = (known after apply)
      + source_json = (known after apply)
    }

  # module.write_custom_policy.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "321340180252-custom-test-bucket-20200825-us-west-2-write"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.write_custom_policy.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.write_policy.aws_s3_bucket.this will be created
  + resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "test-bucket-20200825-us-west-2-write"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = [
              + "*",
            ]
          + allowed_methods = [
              + "GET",
              + "PUT",
              + "POST",
            ]
          + allowed_origins = [
              + "*",
            ]
          + expose_headers  = []
          + max_age_seconds = 3000
        }

      + versioning {
          + enabled    = false
          + mfa_delete = false
        }
    }

  # module.write_policy.aws_s3_bucket_policy.this will be created
  + resource "aws_s3_bucket_policy" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:*"
                      + Condition = {
                          + Bool = {
                              + aws:SecureTransport = [
                                  + "false",
                                ]
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825-us-west-2-write/*",
                          + "arn:aws:s3:::test-bucket-20200825-us-west-2-write",
                        ]
                      + Sid       = "DenyNonSecureTransport"
                    },
                  + {
                      + Action    = [
                          + "s3:RestoreObject",
                          + "s3:PutObjectRetention",
                          + "s3:PutObject",
                          + "s3:DeleteObjectVersion",
                          + "s3:DeleteObject",
                          + "s3:AbortMultipartUpload",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789101:role/AWS-S3-Write-Role"
                        }
                      + Resource  = [
                          + "arn:aws:s3:::test-bucket-20200825-us-west-2-write/*",
                          + "arn:aws:s3:::test-bucket-20200825-us-west-2-write",
                        ]
                      + Sid       = "WriteAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

Plan: 28 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.